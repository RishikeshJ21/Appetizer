-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.admin_user
(
    admin_user_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    status boolean NOT NULL DEFAULT true,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    full_name character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT admin_user_pkey PRIMARY KEY (admin_user_id),
    CONSTRAINT "ADMIN_USER_EMAIL_UNIQUE" UNIQUE (email),
    CONSTRAINT "ADMIN_USER_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.attribute
(
    attribute_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    attribute_code character varying COLLATE pg_catalog."default" NOT NULL,
    attribute_name character varying COLLATE pg_catalog."default" NOT NULL,
    type character varying COLLATE pg_catalog."default" NOT NULL,
    is_required boolean NOT NULL DEFAULT false,
    display_on_frontend boolean NOT NULL DEFAULT false,
    sort_order integer NOT NULL DEFAULT 0,
    is_filterable boolean NOT NULL DEFAULT false,
    CONSTRAINT attribute_pkey PRIMARY KEY (attribute_id),
    CONSTRAINT "ATTRIBUTE_CODE_UNIQUE" UNIQUE (attribute_code),
    CONSTRAINT "ATTRIBUTE_CODE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.attribute_group
(
    attribute_group_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    group_name text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT attribute_group_pkey PRIMARY KEY (attribute_group_id),
    CONSTRAINT "ATTRIBUTE_GROUP_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.attribute_group_link
(
    attribute_group_link_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    attribute_id integer NOT NULL,
    group_id integer NOT NULL,
    CONSTRAINT attribute_group_link_pkey PRIMARY KEY (attribute_group_link_id),
    CONSTRAINT "ATTRIBUTE_GROUP_LINK_UNIQUE" UNIQUE (attribute_id, group_id)
);

CREATE TABLE IF NOT EXISTS public.attribute_option
(
    attribute_option_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    attribute_id integer NOT NULL,
    attribute_code character varying COLLATE pg_catalog."default" NOT NULL,
    option_text character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT attribute_option_pkey PRIMARY KEY (attribute_option_id),
    CONSTRAINT "ATTRIBUTE_OPTION_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.cart
(
    cart_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    sid character varying COLLATE pg_catalog."default",
    currency character varying COLLATE pg_catalog."default" NOT NULL,
    customer_id integer,
    customer_group_id smallint,
    customer_email character varying COLLATE pg_catalog."default",
    customer_full_name character varying COLLATE pg_catalog."default",
    user_ip character varying COLLATE pg_catalog."default",
    status boolean NOT NULL DEFAULT false,
    coupon character varying COLLATE pg_catalog."default",
    shipping_fee_excl_tax numeric(12, 4) DEFAULT NULL::numeric,
    shipping_fee_incl_tax numeric(12, 4) DEFAULT NULL::numeric,
    discount_amount numeric(12, 4) DEFAULT NULL::numeric,
    sub_total numeric(12, 4) NOT NULL,
    sub_total_incl_tax numeric(12, 4) NOT NULL,
    total_qty integer NOT NULL,
    total_weight numeric(12, 4) DEFAULT NULL::numeric,
    tax_amount numeric(12, 4) NOT NULL,
    grand_total numeric(12, 4) NOT NULL,
    shipping_method character varying COLLATE pg_catalog."default",
    shipping_method_name character varying COLLATE pg_catalog."default",
    shipping_zone_id integer,
    shipping_address_id integer,
    payment_method character varying COLLATE pg_catalog."default",
    payment_method_name character varying COLLATE pg_catalog."default",
    billing_address_id integer,
    shipping_note text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cart_pkey PRIMARY KEY (cart_id),
    CONSTRAINT "CART_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.cart_address
(
    cart_address_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    full_name character varying COLLATE pg_catalog."default",
    postcode character varying COLLATE pg_catalog."default",
    telephone character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default",
    province character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    address_1 character varying COLLATE pg_catalog."default",
    address_2 character varying COLLATE pg_catalog."default",
    CONSTRAINT cart_address_pkey PRIMARY KEY (cart_address_id),
    CONSTRAINT "CART_ADDRESS_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.cart_item
(
    cart_item_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    cart_id integer NOT NULL,
    product_id integer NOT NULL,
    product_sku character varying COLLATE pg_catalog."default" NOT NULL,
    product_name text COLLATE pg_catalog."default" NOT NULL,
    thumbnail character varying COLLATE pg_catalog."default",
    product_weight numeric(12, 4) DEFAULT NULL::numeric,
    product_price numeric(12, 4) NOT NULL,
    product_price_incl_tax numeric(12, 4) NOT NULL,
    qty integer NOT NULL,
    final_price numeric(12, 4) NOT NULL,
    final_price_incl_tax numeric(12, 4) NOT NULL,
    tax_percent numeric(12, 4) NOT NULL,
    tax_amount numeric(12, 4) NOT NULL,
    discount_amount numeric(12, 4) NOT NULL,
    sub_total numeric(12, 4) NOT NULL,
    total numeric(12, 4) NOT NULL,
    variant_group_id integer,
    variant_options text COLLATE pg_catalog."default",
    product_custom_options text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cart_item_pkey PRIMARY KEY (cart_item_id),
    CONSTRAINT "CART_ITEM_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.category
(
    category_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    status boolean NOT NULL,
    parent_id integer,
    include_in_nav boolean NOT NULL,
    "position" smallint,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT category_pkey PRIMARY KEY (category_id),
    CONSTRAINT "CATEGORY_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.category_description
(
    category_description_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    category_description_category_id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    short_description text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    image character varying COLLATE pg_catalog."default",
    meta_title text COLLATE pg_catalog."default",
    meta_keywords text COLLATE pg_catalog."default",
    meta_description text COLLATE pg_catalog."default",
    url_key character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT category_description_pkey PRIMARY KEY (category_description_id),
    CONSTRAINT "CATEGORY_ID_UNIQUE" UNIQUE (category_description_category_id),
    CONSTRAINT "CATEGORY_URL_KEY_UNIQUE" UNIQUE (url_key)
);

CREATE TABLE IF NOT EXISTS public.cms_page
(
    cms_page_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    layout character varying COLLATE pg_catalog."default" NOT NULL,
    status boolean,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT cms_page_pkey PRIMARY KEY (cms_page_id),
    CONSTRAINT "CMS_PAGE_UUID" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.cms_page_description
(
    cms_page_description_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cms_page_description_cms_page_id integer,
    url_key character varying COLLATE pg_catalog."default" NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    content text COLLATE pg_catalog."default",
    meta_title character varying COLLATE pg_catalog."default",
    meta_keywords character varying COLLATE pg_catalog."default",
    meta_description text COLLATE pg_catalog."default",
    CONSTRAINT cms_page_description_pkey PRIMARY KEY (cms_page_description_id),
    CONSTRAINT "PAGE_ID_UNIQUE" UNIQUE (cms_page_description_cms_page_id),
    CONSTRAINT "URL_KEY_UNIQUE" UNIQUE (url_key)
);

CREATE TABLE IF NOT EXISTS public.collection
(
    collection_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    code character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT collection_pkey PRIMARY KEY (collection_id),
    CONSTRAINT "COLLECTION_CODE_UNIQUE" UNIQUE (code),
    CONSTRAINT "COLLECTION_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.coupon
(
    coupon_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    status boolean NOT NULL DEFAULT true,
    description character varying COLLATE pg_catalog."default" NOT NULL,
    discount_amount numeric(12, 4) NOT NULL,
    free_shipping boolean NOT NULL DEFAULT false,
    discount_type character varying COLLATE pg_catalog."default" NOT NULL DEFAULT '1'::character varying,
    coupon character varying COLLATE pg_catalog."default" NOT NULL,
    used_time integer NOT NULL DEFAULT 0,
    target_products jsonb,
    condition jsonb,
    user_condition jsonb,
    buyx_gety jsonb,
    max_uses_time_per_coupon integer,
    max_uses_time_per_customer integer,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT coupon_pkey PRIMARY KEY (coupon_id),
    CONSTRAINT "COUPON_UNIQUE" UNIQUE (coupon),
    CONSTRAINT "COUPON_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    customer_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    status smallint NOT NULL DEFAULT 1,
    group_id integer DEFAULT 1,
    email character varying COLLATE pg_catalog."default" NOT NULL,
    password character varying COLLATE pg_catalog."default" NOT NULL,
    full_name character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_google_login boolean NOT NULL DEFAULT false,
    CONSTRAINT customer_pkey PRIMARY KEY (customer_id),
    CONSTRAINT "CUSTOMER_UUID_UNIQUE" UNIQUE (uuid),
    CONSTRAINT "EMAIL_UNIQUE" UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.customer_address
(
    customer_address_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    customer_id integer NOT NULL,
    full_name character varying COLLATE pg_catalog."default",
    telephone character varying COLLATE pg_catalog."default",
    address_1 character varying COLLATE pg_catalog."default",
    address_2 character varying COLLATE pg_catalog."default",
    postcode character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    province character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_default smallint,
    CONSTRAINT customer_address_pkey PRIMARY KEY (customer_address_id),
    CONSTRAINT "CUSTOMER_ADDRESS_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.customer_group
(
    customer_group_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    group_name character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT customer_group_pkey PRIMARY KEY (customer_group_id)
);

CREATE TABLE IF NOT EXISTS public.event
(
    event_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    data json,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT event_pkey PRIMARY KEY (event_id),
    CONSTRAINT "EVENT_UUID" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.migration
(
    migration_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    module character varying COLLATE pg_catalog."default" NOT NULL,
    version character varying COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT migration_pkey PRIMARY KEY (migration_id),
    CONSTRAINT "MODULE_UNIQUE" UNIQUE (module)
);

CREATE TABLE IF NOT EXISTS public."order"
(
    order_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    integration_order_id character varying COLLATE pg_catalog."default",
    sid character varying COLLATE pg_catalog."default",
    order_number character varying COLLATE pg_catalog."default" NOT NULL,
    cart_id integer NOT NULL,
    currency character varying COLLATE pg_catalog."default" NOT NULL,
    customer_id integer,
    customer_email character varying COLLATE pg_catalog."default",
    customer_full_name character varying COLLATE pg_catalog."default",
    user_ip character varying COLLATE pg_catalog."default",
    user_agent character varying COLLATE pg_catalog."default",
    coupon character varying COLLATE pg_catalog."default",
    shipping_fee_excl_tax numeric(12, 4) DEFAULT NULL::numeric,
    shipping_fee_incl_tax numeric(12, 4) DEFAULT NULL::numeric,
    discount_amount numeric(12, 4) DEFAULT NULL::numeric,
    sub_total numeric(12, 4) NOT NULL,
    sub_total_incl_tax numeric(12, 4) NOT NULL,
    total_qty integer NOT NULL,
    total_weight numeric(12, 4) DEFAULT NULL::numeric,
    tax_amount numeric(12, 4) NOT NULL,
    shipping_note text COLLATE pg_catalog."default",
    grand_total numeric(12, 4) NOT NULL,
    shipping_method character varying COLLATE pg_catalog."default",
    shipping_method_name character varying COLLATE pg_catalog."default",
    shipping_address_id integer,
    payment_method character varying COLLATE pg_catalog."default",
    payment_method_name character varying COLLATE pg_catalog."default",
    billing_address_id integer,
    shipment_status character varying COLLATE pg_catalog."default",
    payment_status character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    razorpay_order_id character varying(50) COLLATE pg_catalog."default" DEFAULT NULL::character varying,
    CONSTRAINT order_pkey PRIMARY KEY (order_id),
    CONSTRAINT "ORDER_NUMBER_UNIQUE" UNIQUE (order_number),
    CONSTRAINT "ORDER_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.order_activity
(
    order_activity_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    order_activity_order_id integer NOT NULL,
    comment text COLLATE pg_catalog."default" NOT NULL,
    customer_notified boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT order_activity_pkey PRIMARY KEY (order_activity_id),
    CONSTRAINT "ORDER_ACTIVITY_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.order_address
(
    order_address_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    full_name character varying COLLATE pg_catalog."default",
    postcode character varying COLLATE pg_catalog."default",
    telephone character varying COLLATE pg_catalog."default",
    country character varying COLLATE pg_catalog."default",
    province character varying COLLATE pg_catalog."default",
    city character varying COLLATE pg_catalog."default",
    address_1 character varying COLLATE pg_catalog."default",
    address_2 character varying COLLATE pg_catalog."default",
    CONSTRAINT order_address_pkey PRIMARY KEY (order_address_id),
    CONSTRAINT "ORDER_ADDRESS_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.order_item
(
    order_item_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    order_item_order_id integer NOT NULL,
    product_id integer NOT NULL,
    referer integer,
    product_sku character varying COLLATE pg_catalog."default" NOT NULL,
    product_name text COLLATE pg_catalog."default" NOT NULL,
    thumbnail character varying COLLATE pg_catalog."default",
    product_weight numeric(12, 4) DEFAULT NULL::numeric,
    product_price numeric(12, 4) NOT NULL,
    product_price_incl_tax numeric(12, 4) NOT NULL,
    qty integer NOT NULL,
    final_price numeric(12, 4) NOT NULL,
    final_price_incl_tax numeric(12, 4) NOT NULL,
    tax_percent numeric(12, 4) NOT NULL,
    tax_amount numeric(12, 4) NOT NULL,
    discount_amount numeric(12, 4) NOT NULL,
    sub_total numeric(12, 4) NOT NULL,
    total numeric(12, 4) NOT NULL,
    variant_group_id integer,
    variant_options text COLLATE pg_catalog."default",
    product_custom_options text COLLATE pg_catalog."default",
    requested_data text COLLATE pg_catalog."default",
    CONSTRAINT order_item_pkey PRIMARY KEY (order_item_id),
    CONSTRAINT "ORDER_ITEM_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.payment_transaction
(
    payment_transaction_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    payment_transaction_order_id integer NOT NULL,
    transaction_id character varying COLLATE pg_catalog."default",
    transaction_type character varying COLLATE pg_catalog."default" NOT NULL,
    amount numeric(12, 4) NOT NULL,
    parent_transaction_id character varying COLLATE pg_catalog."default",
    payment_action character varying COLLATE pg_catalog."default",
    additional_information text COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT payment_transaction_pkey PRIMARY KEY (payment_transaction_id),
    CONSTRAINT "PAYMENT_TRANSACTION_UUID_UNIQUE" UNIQUE (uuid),
    CONSTRAINT "UNQ_PAYMENT_TRANSACTION_ID_ORDER_ID" UNIQUE (payment_transaction_order_id, transaction_id)
);

CREATE TABLE IF NOT EXISTS public.product
(
    product_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    type character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'simple'::character varying,
    variant_group_id integer,
    visibility boolean NOT NULL DEFAULT true,
    group_id integer DEFAULT 1,
    image character varying COLLATE pg_catalog."default",
    sku character varying COLLATE pg_catalog."default" NOT NULL,
    price numeric(12, 4) NOT NULL,
    weight numeric(12, 4) DEFAULT NULL::numeric,
    tax_class smallint,
    status boolean NOT NULL DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    category_id integer,
    CONSTRAINT product_pkey PRIMARY KEY (product_id),
    CONSTRAINT "PRODUCT_SKU_UNIQUE" UNIQUE (sku),
    CONSTRAINT "PRODUCT_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.product_attribute_value_index
(
    product_attribute_value_index_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_id integer NOT NULL,
    attribute_id integer NOT NULL,
    option_id integer,
    option_text text COLLATE pg_catalog."default",
    CONSTRAINT product_attribute_value_index_pkey PRIMARY KEY (product_attribute_value_index_id),
    CONSTRAINT "OPTION_VALUE_UNIQUE" UNIQUE (product_id, attribute_id, option_id)
);

CREATE TABLE IF NOT EXISTS public.product_collection
(
    product_collection_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    collection_id integer NOT NULL,
    product_id integer NOT NULL,
    CONSTRAINT product_collection_pkey PRIMARY KEY (product_collection_id),
    CONSTRAINT "PRODUCT_COLLECTION_UNIQUE" UNIQUE (collection_id, product_id)
);

CREATE TABLE IF NOT EXISTS public.product_custom_option
(
    product_custom_option_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    product_custom_option_product_id integer NOT NULL,
    option_name character varying COLLATE pg_catalog."default" NOT NULL,
    option_type character varying COLLATE pg_catalog."default" NOT NULL,
    is_required boolean NOT NULL DEFAULT false,
    sort_order integer,
    CONSTRAINT product_custom_option_pkey PRIMARY KEY (product_custom_option_id),
    CONSTRAINT "PRODUCT_CUSTOM_OPTION_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.product_custom_option_value
(
    product_custom_option_value_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    option_id integer NOT NULL,
    extra_price numeric(12, 4) DEFAULT NULL::numeric,
    sort_order integer,
    value character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT product_custom_option_value_pkey PRIMARY KEY (product_custom_option_value_id),
    CONSTRAINT "PRODUCT_CUSTOM_OPTION_VALUE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.product_description
(
    product_description_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_description_product_id integer NOT NULL,
    name character varying COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    short_description text COLLATE pg_catalog."default",
    url_key character varying COLLATE pg_catalog."default" NOT NULL,
    meta_title text COLLATE pg_catalog."default",
    meta_description text COLLATE pg_catalog."default",
    meta_keywords text COLLATE pg_catalog."default",
    CONSTRAINT product_description_pkey PRIMARY KEY (product_description_id),
    CONSTRAINT "PRODUCT_ID_UNIQUE" UNIQUE (product_description_product_id),
    CONSTRAINT "PRODUCT_URL_KEY_UNIQUE" UNIQUE (url_key)
);

CREATE TABLE IF NOT EXISTS public.product_image
(
    product_image_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    product_image_product_id integer NOT NULL,
    image character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT product_image_pkey PRIMARY KEY (product_image_id),
    CONSTRAINT "PRODUCT_IMAGE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.product_inventory
(
    product_inventory_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    product_inventory_product_id integer NOT NULL,
    qty integer NOT NULL DEFAULT 0,
    manage_stock boolean NOT NULL DEFAULT false,
    stock_availability boolean NOT NULL DEFAULT false,
    CONSTRAINT product_inventory_pkey PRIMARY KEY (product_inventory_id),
    CONSTRAINT "PRODUCT_INVENTORY_PRODUCT_ID_UNIQUE" UNIQUE (product_inventory_product_id)
);

CREATE TABLE IF NOT EXISTS public.product_review
(
    review_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    product_id integer NOT NULL,
    customer_name character varying COLLATE pg_catalog."default" NOT NULL,
    rating integer NOT NULL,
    comment character varying COLLATE pg_catalog."default",
    approved boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT product_review_pkey PRIMARY KEY (review_id)
);

CREATE TABLE IF NOT EXISTS public.razorpay_payment_transaction_mapping
(
    id integer NOT NULL DEFAULT nextval('razorpay_payment_transaction_mapping_id_seq'::regclass),
    razorpay_order_id character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT razorpay_payment_transaction_mapping_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reset_password_token
(
    reset_password_token_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    customer_id integer NOT NULL,
    token text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT reset_password_token_pkey PRIMARY KEY (reset_password_token_id)
);

CREATE TABLE IF NOT EXISTS public.session
(
    sid character varying COLLATE pg_catalog."default" NOT NULL,
    sess json NOT NULL,
    expire timestamp(6) without time zone NOT NULL,
    CONSTRAINT "SESSION_PKEY" PRIMARY KEY (sid)
);

CREATE TABLE IF NOT EXISTS public.setting
(
    setting_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    value text COLLATE pg_catalog."default",
    is_json boolean NOT NULL DEFAULT false,
    CONSTRAINT setting_pkey PRIMARY KEY (setting_id),
    CONSTRAINT "SETTING_NAME_UNIQUE" UNIQUE (name),
    CONSTRAINT "SETTING_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.shipment
(
    shipment_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    shipment_order_id integer NOT NULL,
    carrier character varying COLLATE pg_catalog."default",
    tracking_number character varying COLLATE pg_catalog."default",
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT shipment_pkey PRIMARY KEY (shipment_id),
    CONSTRAINT "SHIPMENT_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.shipping_method
(
    shipping_method_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT shipping_method_pkey PRIMARY KEY (shipping_method_id),
    CONSTRAINT "SHIPPING_METHOD_NAME_UNIQUE" UNIQUE (name),
    CONSTRAINT "SHIPPING_METHOD_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.shipping_zone
(
    shipping_zone_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    country character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT shipping_zone_pkey PRIMARY KEY (shipping_zone_id),
    CONSTRAINT "SHIPPING_ZONE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.shipping_zone_method
(
    shipping_zone_method_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    method_id integer NOT NULL,
    zone_id integer NOT NULL,
    is_enabled boolean NOT NULL DEFAULT true,
    cost numeric(12, 4) DEFAULT NULL::numeric,
    calculate_api character varying COLLATE pg_catalog."default",
    condition_type character varying COLLATE pg_catalog."default",
    max numeric(12, 4) DEFAULT NULL::numeric,
    min numeric(12, 4) DEFAULT NULL::numeric,
    CONSTRAINT shipping_zone_method_pkey PRIMARY KEY (shipping_zone_method_id),
    CONSTRAINT "METHOD_ZONE_UNIQUE" UNIQUE (zone_id, method_id)
);

CREATE TABLE IF NOT EXISTS public.shipping_zone_province
(
    shipping_zone_province_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    zone_id integer NOT NULL,
    province character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT shipping_zone_province_pkey PRIMARY KEY (shipping_zone_province_id),
    CONSTRAINT "SHIPPING_ZONE_PROVINCE_PROVINCE_UNIQUE" UNIQUE (province),
    CONSTRAINT "SHIPPING_ZONE_PROVINCE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.tax_class
(
    tax_class_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tax_class_pkey PRIMARY KEY (tax_class_id),
    CONSTRAINT "TAX_CLASS_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.tax_rate
(
    tax_rate_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying COLLATE pg_catalog."default" NOT NULL,
    tax_class_id integer,
    country character varying COLLATE pg_catalog."default" NOT NULL DEFAULT '*'::character varying,
    province character varying COLLATE pg_catalog."default" NOT NULL DEFAULT '*'::character varying,
    postcode character varying COLLATE pg_catalog."default" NOT NULL DEFAULT '*'::character varying,
    rate numeric(12, 4) NOT NULL,
    is_compound boolean NOT NULL DEFAULT false,
    priority integer NOT NULL,
    CONSTRAINT tax_rate_pkey PRIMARY KEY (tax_rate_id),
    CONSTRAINT "TAX_RATE_PRIORITY_UNIQUE" UNIQUE (priority, tax_class_id),
    CONSTRAINT "TAX_RATE_UUID_UNIQUE" UNIQUE (uuid)
);

CREATE TABLE IF NOT EXISTS public.url_rewrite
(
    url_rewrite_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    language character varying COLLATE pg_catalog."default" NOT NULL DEFAULT 'en'::character varying,
    request_path character varying COLLATE pg_catalog."default" NOT NULL,
    target_path character varying COLLATE pg_catalog."default" NOT NULL,
    entity_uuid uuid,
    entity_type character varying COLLATE pg_catalog."default",
    CONSTRAINT url_rewrite_pkey PRIMARY KEY (url_rewrite_id),
    CONSTRAINT "URL_REWRITE_PATH_UNIQUE" UNIQUE (language, entity_uuid)
);

CREATE TABLE IF NOT EXISTS public.variant_group
(
    variant_group_id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    uuid uuid NOT NULL DEFAULT gen_random_uuid(),
    attribute_group_id integer NOT NULL,
    attribute_one integer,
    attribute_two integer,
    attribute_three integer,
    attribute_four integer,
    attribute_five integer,
    visibility boolean NOT NULL DEFAULT false,
    CONSTRAINT variant_group_pkey PRIMARY KEY (variant_group_id),
    CONSTRAINT "VARIANT_GROUP_UUID_UNIQUE" UNIQUE (uuid)
);

ALTER TABLE IF EXISTS public.attribute_group_link
    ADD CONSTRAINT "FK_ATTRIBUTE_LINK" FOREIGN KEY (attribute_id)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_LINK"
    ON public.attribute_group_link(attribute_id);


ALTER TABLE IF EXISTS public.attribute_group_link
    ADD CONSTRAINT "FK_GROUP_LINK" FOREIGN KEY (group_id)
    REFERENCES public.attribute_group (attribute_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_GROUP_LINK"
    ON public.attribute_group_link(group_id);


ALTER TABLE IF EXISTS public.attribute_option
    ADD CONSTRAINT "FK_ATTRIBUTE_OPTION" FOREIGN KEY (attribute_id)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_OPTION"
    ON public.attribute_option(attribute_id);


ALTER TABLE IF EXISTS public.cart
    ADD CONSTRAINT "FK_CART_SHIPPING_ZONE" FOREIGN KEY (shipping_zone_id)
    REFERENCES public.shipping_zone (shipping_zone_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS "FK_CART_SHIPPING_ZONE"
    ON public.cart(shipping_zone_id);


ALTER TABLE IF EXISTS public.cart_item
    ADD CONSTRAINT "FK_CART_ITEM" FOREIGN KEY (cart_id)
    REFERENCES public.cart (cart_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_CART_ITEM"
    ON public.cart_item(cart_id);


ALTER TABLE IF EXISTS public.cart_item
    ADD CONSTRAINT "FK_CART_ITEM_PRODUCT" FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_CART_ITEM_PRODUCT"
    ON public.cart_item(product_id);


ALTER TABLE IF EXISTS public.category_description
    ADD CONSTRAINT "FK_CATEGORY_DESCRIPTION" FOREIGN KEY (category_description_category_id)
    REFERENCES public.category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "CATEGORY_ID_UNIQUE"
    ON public.category_description(category_description_category_id);


ALTER TABLE IF EXISTS public.cms_page_description
    ADD CONSTRAINT "FK_CMS_PAGE_DESCRIPTION" FOREIGN KEY (cms_page_description_cms_page_id)
    REFERENCES public.cms_page (cms_page_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "PAGE_ID_UNIQUE"
    ON public.cms_page_description(cms_page_description_cms_page_id);


ALTER TABLE IF EXISTS public.customer
    ADD CONSTRAINT "FK_CUSTOMER_GROUP" FOREIGN KEY (group_id)
    REFERENCES public.customer_group (customer_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS "FK_CUSTOMER_GROUP"
    ON public.customer(group_id);


ALTER TABLE IF EXISTS public.customer_address
    ADD CONSTRAINT "FK_CUSTOMER_ADDRESS" FOREIGN KEY (customer_id)
    REFERENCES public.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_CUSTOMER_ADDRESS"
    ON public.customer_address(customer_id);


ALTER TABLE IF EXISTS public.order_activity
    ADD CONSTRAINT "FK_ORDER_ACTIVITY" FOREIGN KEY (order_activity_order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ORDER_ACTIVITY"
    ON public.order_activity(order_activity_order_id);


ALTER TABLE IF EXISTS public.order_item
    ADD CONSTRAINT "FK_ORDER" FOREIGN KEY (order_item_order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ORDER"
    ON public.order_item(order_item_order_id);


ALTER TABLE IF EXISTS public.payment_transaction
    ADD CONSTRAINT "FK_PAYMENT_TRANSACTION_ORDER" FOREIGN KEY (payment_transaction_order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_PAYMENT_TRANSACTION_ORDER"
    ON public.payment_transaction(payment_transaction_order_id);


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT "FK_PRODUCT_ATTRIBUTE_GROUP" FOREIGN KEY (group_id)
    REFERENCES public.attribute_group (attribute_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_ATTRIBUTE_GROUP"
    ON public.product(group_id);


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT "FK_PRODUCT_VARIANT_GROUP" FOREIGN KEY (variant_group_id)
    REFERENCES public.variant_group (variant_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_VARIANT_GROUP"
    ON public.product(variant_group_id);


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT "FK_TAX_CLASS" FOREIGN KEY (tax_class)
    REFERENCES public.tax_class (tax_class_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.product
    ADD CONSTRAINT "PRODUCT_CATEGORY_ID_CONSTRAINT" FOREIGN KEY (category_id)
    REFERENCES public.category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.product_attribute_value_index
    ADD CONSTRAINT "FK_ATTRIBUTE_OPTION_VALUE_LINK" FOREIGN KEY (option_id)
    REFERENCES public.attribute_option (attribute_option_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_OPTION_VALUE_LINK"
    ON public.product_attribute_value_index(option_id);


ALTER TABLE IF EXISTS public.product_attribute_value_index
    ADD CONSTRAINT "FK_ATTRIBUTE_VALUE_LINK" FOREIGN KEY (attribute_id)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VALUE_LINK"
    ON public.product_attribute_value_index(attribute_id);


ALTER TABLE IF EXISTS public.product_attribute_value_index
    ADD CONSTRAINT "FK_PRODUCT_ATTRIBUTE_LINK" FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_ATTRIBUTE_LINK"
    ON public.product_attribute_value_index(product_id);


ALTER TABLE IF EXISTS public.product_collection
    ADD CONSTRAINT "FK_COLLECTION_PRODUCT_LINK" FOREIGN KEY (collection_id)
    REFERENCES public.collection (collection_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_COLLECTION_PRODUCT_LINK"
    ON public.product_collection(collection_id);


ALTER TABLE IF EXISTS public.product_collection
    ADD CONSTRAINT "FK_PRODUCT_COLLECTION_LINK" FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_COLLECTION_LINK"
    ON public.product_collection(product_id);


ALTER TABLE IF EXISTS public.product_custom_option
    ADD CONSTRAINT "FK_PRODUCT_CUSTOM_OPTION" FOREIGN KEY (product_custom_option_product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_CUSTOM_OPTION"
    ON public.product_custom_option(product_custom_option_product_id);


ALTER TABLE IF EXISTS public.product_custom_option_value
    ADD CONSTRAINT "FK_CUSTOM_OPTION_VALUE" FOREIGN KEY (option_id)
    REFERENCES public.product_custom_option (product_custom_option_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_CUSTOM_OPTION_VALUE"
    ON public.product_custom_option_value(option_id);


ALTER TABLE IF EXISTS public.product_description
    ADD CONSTRAINT "FK_PRODUCT_DESCRIPTION" FOREIGN KEY (product_description_product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "PRODUCT_ID_UNIQUE"
    ON public.product_description(product_description_product_id);


ALTER TABLE IF EXISTS public.product_image
    ADD CONSTRAINT "FK_PRODUCT_IMAGE_LINK" FOREIGN KEY (product_image_product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_PRODUCT_IMAGE_LINK"
    ON public.product_image(product_image_product_id);


ALTER TABLE IF EXISTS public.product_inventory
    ADD CONSTRAINT "PRODUCT_INVENTORY_PRODUCT_ID_CONSTANTSRAINT" FOREIGN KEY (product_inventory_product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "PRODUCT_INVENTORY_PRODUCT_ID_UNIQUE"
    ON public.product_inventory(product_inventory_product_id);


ALTER TABLE IF EXISTS public.product_review
    ADD CONSTRAINT "FK_PRODUCT_REVIEW" FOREIGN KEY (product_id)
    REFERENCES public.product (product_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.reset_password_token
    ADD CONSTRAINT "FK_RESET_PASSWORD_TOKEN_CUSTOMER" FOREIGN KEY (customer_id)
    REFERENCES public.customer (customer_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.shipment
    ADD CONSTRAINT "FK_ORDER_SHIPMENT" FOREIGN KEY (shipment_order_id)
    REFERENCES public."order" (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ORDER_SHIPMENT"
    ON public.shipment(shipment_order_id);


ALTER TABLE IF EXISTS public.shipping_zone_method
    ADD CONSTRAINT "FK_METHOD_ZONE" FOREIGN KEY (method_id)
    REFERENCES public.shipping_method (shipping_method_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_METHOD_ZONE"
    ON public.shipping_zone_method(method_id);


ALTER TABLE IF EXISTS public.shipping_zone_method
    ADD CONSTRAINT "FK_ZONE_METHOD" FOREIGN KEY (zone_id)
    REFERENCES public.shipping_zone (shipping_zone_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ZONE_METHOD"
    ON public.shipping_zone_method(zone_id);


ALTER TABLE IF EXISTS public.shipping_zone_province
    ADD CONSTRAINT "FK_SHIPPING_ZONE_PROVINCE" FOREIGN KEY (zone_id)
    REFERENCES public.shipping_zone (shipping_zone_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_SHIPPING_ZONE_PROVINCE"
    ON public.shipping_zone_province(zone_id);


ALTER TABLE IF EXISTS public.tax_rate
    ADD CONSTRAINT "FK_TAX_RATE_TAX_CLASS" FOREIGN KEY (tax_class_id)
    REFERENCES public.tax_class (tax_class_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_GROUP_VARIANT" FOREIGN KEY (attribute_group_id)
    REFERENCES public.attribute_group (attribute_group_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_GROUP_VARIANT"
    ON public.variant_group(attribute_group_id);


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_VARIANT_FIVE" FOREIGN KEY (attribute_five)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VARIANT_FIVE"
    ON public.variant_group(attribute_five);


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_VARIANT_FOUR" FOREIGN KEY (attribute_four)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VARIANT_FOUR"
    ON public.variant_group(attribute_four);


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_VARIANT_ONE" FOREIGN KEY (attribute_one)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VARIANT_ONE"
    ON public.variant_group(attribute_one);


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_VARIANT_THREE" FOREIGN KEY (attribute_three)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VARIANT_THREE"
    ON public.variant_group(attribute_three);


ALTER TABLE IF EXISTS public.variant_group
    ADD CONSTRAINT "FK_ATTRIBUTE_VARIANT_TWO" FOREIGN KEY (attribute_two)
    REFERENCES public.attribute (attribute_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;
CREATE INDEX IF NOT EXISTS "FK_ATTRIBUTE_VARIANT_TWO"
    ON public.variant_group(attribute_two);

END;